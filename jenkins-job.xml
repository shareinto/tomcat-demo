
<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.33">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.72">
    <script>pipeline {
    agent {
        node {
        label &apos;docker&apos;
    }
    }
    options {
        timestamps()
    }

    // environment {
    //     //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables
    //     IMAGE = readMavenPom().getArtifactId()
    //     VERSION = readMavenPom().getVersion()
    // }
    stages{
        stage(&quot;FetchCode&quot;){
            steps{
                sh &apos;rm -rf ./*&apos;
                git branch: &apos;master&apos;,
                    credentialsId: &apos;0e16e077-0ec9-452b-aaa1-f935110591a8&apos;,
                    url: &apos;git@github.com:shareinto/tomcat-demo.git&apos;
            }
        }
        stage(&apos;Build&apos;) {
          agent {
            docker {
              /*
               * Reuse the workspace on the agent defined at top-level of Pipeline but run inside a container.
               * In this case we are running a container with maven so we don&apos;t have to install specific versions
               * of maven directly on the agent
               */
              reuseNode true
              image &apos;maven:3.5.0-jdk-8&apos;
            }
          }
          steps {
              sh &apos;mvn clean package&apos;
          }
          post {
            success {
              // we only worry about archiving the jar file if the build steps are successful
              archiveArtifacts(artifacts: &apos;**/target/*.jar&apos;, allowEmptyArchive: true)
            }
          }
        }
        stage(&apos;Build and Publish Image&apos;) {
            environment {
                //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables
                IMAGE = readMavenPom().getArtifactId()
                VERSION = readMavenPom().getVersion()
            }
            steps {
                withCredentials([usernamePassword(credentialsId: &apos;docker-register&apos;, passwordVariable: &apos;dockerPassword&apos;, usernameVariable: &apos;dockerUser&apos;)]) {
                    sh &quot;&quot;&quot;
                    docker login -u ${dockerUser} -p ${dockerPassword}
                    docker build -t ${IMAGE} .
                    docker tag ${IMAGE} shareinto/${IMAGE}:${VERSION}
                    docker push ${IMAGE}:${VERSION}
                    &quot;&quot;&quot;
                }
            }
        }
    }
  post {
    failure {
      // notify users when the Pipeline fails
      mail to: &apos;team@example.com&apos;,
          subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
          body: &quot;Something is wrong with ${env.BUILD_URL}&quot;
    }
  }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>